// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datetime.proto

package datetime

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DatetimeParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatetimeParams) Reset()         { *m = DatetimeParams{} }
func (m *DatetimeParams) String() string { return proto.CompactTextString(m) }
func (*DatetimeParams) ProtoMessage()    {}
func (*DatetimeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a0163ec53b86cf, []int{0}
}

func (m *DatetimeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatetimeParams.Unmarshal(m, b)
}
func (m *DatetimeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatetimeParams.Marshal(b, m, deterministic)
}
func (m *DatetimeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatetimeParams.Merge(m, src)
}
func (m *DatetimeParams) XXX_Size() int {
	return xxx_messageInfo_DatetimeParams.Size(m)
}
func (m *DatetimeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_DatetimeParams.DiscardUnknown(m)
}

var xxx_messageInfo_DatetimeParams proto.InternalMessageInfo

// The response message containing the greetings
type DatetimeReply struct {
	Datetime             *timestamp.Timestamp `protobuf:"bytes,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DatetimeReply) Reset()         { *m = DatetimeReply{} }
func (m *DatetimeReply) String() string { return proto.CompactTextString(m) }
func (*DatetimeReply) ProtoMessage()    {}
func (*DatetimeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a0163ec53b86cf, []int{1}
}

func (m *DatetimeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatetimeReply.Unmarshal(m, b)
}
func (m *DatetimeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatetimeReply.Marshal(b, m, deterministic)
}
func (m *DatetimeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatetimeReply.Merge(m, src)
}
func (m *DatetimeReply) XXX_Size() int {
	return xxx_messageInfo_DatetimeReply.Size(m)
}
func (m *DatetimeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DatetimeReply.DiscardUnknown(m)
}

var xxx_messageInfo_DatetimeReply proto.InternalMessageInfo

func (m *DatetimeReply) GetDatetime() *timestamp.Timestamp {
	if m != nil {
		return m.Datetime
	}
	return nil
}

func init() {
	proto.RegisterType((*DatetimeParams)(nil), "datetime.DatetimeParams")
	proto.RegisterType((*DatetimeReply)(nil), "datetime.DatetimeReply")
}

func init() { proto.RegisterFile("datetime.proto", fileDescriptor_f3a0163ec53b86cf) }

var fileDescriptor_f3a0163ec53b86cf = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x49, 0x2c, 0x49,
	0x2d, 0xc9, 0xcc, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0xe4,
	0xd3, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xe2, 0x49, 0xa5, 0x69, 0xfa, 0x20, 0xd1, 0xe2,
	0x92, 0xc4, 0xdc, 0x02, 0x88, 0x52, 0x25, 0x01, 0x2e, 0x3e, 0x17, 0xa8, 0xe2, 0x80, 0xc4, 0xa2,
	0xc4, 0xdc, 0x62, 0x25, 0x77, 0x2e, 0x5e, 0x98, 0x48, 0x50, 0x6a, 0x41, 0x4e, 0xa5, 0x90, 0x19,
	0x17, 0xdc, 0x3c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x29, 0x3d, 0x88, 0xb1, 0x7a, 0x30,
	0x63, 0xf5, 0x42, 0x60, 0xc6, 0x06, 0xc1, 0xd5, 0x1a, 0xf9, 0x71, 0x71, 0xc0, 0x0c, 0x12, 0x72,
	0xe2, 0xe2, 0x76, 0x4f, 0x2d, 0x81, 0x73, 0x25, 0xf4, 0xe0, 0x2e, 0x46, 0xb5, 0x5d, 0x4a, 0x1c,
	0x53, 0x06, 0xec, 0x0a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x6d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x25, 0x7f, 0x7d, 0xbf, 0xee, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatetimeClient is the client API for Datetime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatetimeClient interface {
	// Sends a greeting
	GetDatetime(ctx context.Context, in *DatetimeParams, opts ...grpc.CallOption) (*DatetimeReply, error)
}

type datetimeClient struct {
	cc grpc.ClientConnInterface
}

func NewDatetimeClient(cc grpc.ClientConnInterface) DatetimeClient {
	return &datetimeClient{cc}
}

func (c *datetimeClient) GetDatetime(ctx context.Context, in *DatetimeParams, opts ...grpc.CallOption) (*DatetimeReply, error) {
	out := new(DatetimeReply)
	err := c.cc.Invoke(ctx, "/datetime.Datetime/GetDatetime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatetimeServer is the server API for Datetime service.
type DatetimeServer interface {
	// Sends a greeting
	GetDatetime(context.Context, *DatetimeParams) (*DatetimeReply, error)
}

// UnimplementedDatetimeServer can be embedded to have forward compatible implementations.
type UnimplementedDatetimeServer struct {
}

func (*UnimplementedDatetimeServer) GetDatetime(ctx context.Context, req *DatetimeParams) (*DatetimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatetime not implemented")
}

func RegisterDatetimeServer(s *grpc.Server, srv DatetimeServer) {
	s.RegisterService(&_Datetime_serviceDesc, srv)
}

func _Datetime_GetDatetime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatetimeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatetimeServer).GetDatetime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datetime.Datetime/GetDatetime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatetimeServer).GetDatetime(ctx, req.(*DatetimeParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Datetime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datetime.Datetime",
	HandlerType: (*DatetimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDatetime",
			Handler:    _Datetime_GetDatetime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datetime.proto",
}
